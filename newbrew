#!/usr/bin/env perl

# License is at the end.

use warnings;
use strict;

my %packages;
my $time_to_die = 0;

while (<>) {
	next if /^\s*$/;
	next if /^#/;
	chomp;

	my $original_line = $_;

	my ($package_name, $options) = split /\s*:\s*/, $_, 2;

	my %package_info;

	while ($options =~ s/\!\{\s*(.*?)\s*\}//) {
		$package_info{commands} //= [ ];
		push @{$package_info{commands}}, $1;
	}

	while ($options =~ s/\+(\S+)//) {
		$package_info{explicit_with}{$1} = 1;
		if (exists $package_info{explicit_without}{$1}) {
			warn "package $_ defines both +$1 and -$1\n";
			++$time_to_die;
		}
	}

	while ($options =~ s/(?:^|\s)-(\S+)//) {
		$package_info{explicit_without}{$1} = 1;
	}

	if ($options =~ /\S/) {
		warn "Input line $. is malformed: $original_line\n";
		warn "  ($options)\n";
		++$time_to_die;
	}

	$packages{$package_name} = \%package_info;
}

if ($time_to_die) {
	die "Configuration has errors, listed above. Please fix and try again.\n";
}

my @package_queue = keys %packages;
while (@package_queue) {
	my $package_name = shift @package_queue;
	my $package_info = ( $packages{$package_name} //= { } );

	next if $package_info->{discovered};
	$package_info->{discovered} = 1;

	warn "Discovering dependencies for package '$package_name'...\n";

	my @all_options = split /\s+/, `brew options --compact '$package_name'`;
	chomp @all_options;

	my %override_options;
	foreach (@all_options) {
		unless (/^--(with(?:out)?)-(\S+)/) {
			warn "  Ignoring non-package option: $_\n";
			next;
		}
		$override_options{$2} = $1;
	}

	my @all_deps = sort grep !/^:/, `brew deps -1 --include-optional --include-requirements '$package_name'`;
	chomp @all_deps;

	my %explicit_with    = %{ $package_info->{explicit_with} // { } };
	my %explicit_without = %{ $package_info->{explicit_without} // { } };

	foreach (@all_deps) {
		# Not an option means it's required.
		unless (exists $override_options{$_}) {
			$package_info->{deps}{$_} = 'required';

			if (exists $explicit_without{$_}) {
				delete $explicit_without{$_};
				warn "package $package_name: custom -$_ cannot exclude required dependency\n";
			}

			# Explicit doesn't matter.
			delete $explicit_with{$_};

			next;
		}

		if ($override_options{$_} eq 'without') {
			if (exists $explicit_without{$_}) {
				$package_info->{opts}{"--without-$_"} = 1;
			}
			else {
				$package_info->{deps}{$_} = 'default';
			}
		}
		elsif (exists $explicit_with{$_}) {
			$package_info->{opts}{"--with-$_"} = 1;
			$package_info->{deps}{$_} = 'explicit';
			$package_info->{overrides_options} = 1;
		}

		delete $explicit_with{$_};
		delete $explicit_without{$_};
	}

	$package_info->{opts}{"--with-$_"} = 1 foreach keys %explicit_with;
	$package_info->{opts}{"--without-$_"} = 1 foreach keys %explicit_without;

	push @package_queue, keys %{ $package_info->{deps} };
}

# One pass through the build requires to create .PHONY targets.
@package_queue = keys %packages;
while (@package_queue) {
	my $package_name = shift @package_queue;

	my $package_info = $packages{$package_name};
	unless (defined $packages{$package_name}) {
		# Can happen if it was added to the queue as a dependency.
		$package_info = $packages{$package_name} = {
			is_phony => 1,
			deps => { },
		};
	}

	next if $package_info->{phonied};
	$package_info->{phonied} = 1;

	warn "Discovering build dependencies for package '$package_name'...\n";

	my @build_deps = sort grep !/^:/, `brew deps -1 --skip-requirements --skip-optional --skip-recommended --include-build '$package_name'`;
	chomp @build_deps;

	foreach (@build_deps) {
		$package_info->{deps}{$_} = 'build' unless exists $package_info->{deps}{$_};
	}

	push @package_queue, @build_deps;
}

die "Something's wrong above this line. Fix it and try again.\n" if $time_to_die;

warn "Writing Makefile to standard output.\n";

print "all:";
print " \\\n\t/usr/local/Cellar/$_" foreach sort keys %packages;
print "\n\n";

foreach my $package_name (sort keys %packages) {
	my $package_info = $packages{$package_name};

	if ($package_info->{is_phony}) {
		print ".PHONY: /usr/local/Cellar/$package_name\n";
	}

	print "/usr/local/Cellar/$package_name:";
	print " \\\n\t\t/usr/local/Cellar/$_" foreach sort keys %{ $package_info->{deps} };

	if ($package_info->{is_phony}) {
		print "\n\t\@echo 'Traversing build-only rule for $package_name.'";
	}
	else {
		print "\n\tbrew install $package_name";
		print " \\\n\t\t$_" foreach sort keys %{ $package_info->{opts} };
		print "\n\t$_" foreach @{ $package_info->{commands} // [ ] };
	}

	print "\n\n";
}

exit;

__END__

Copyright (c) 2017, Rocco Caputo.
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are
met:

1. Redistributions of source code must retain the above copyright
notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
notice, this list of conditions and the following disclaimer in the
documentation and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
